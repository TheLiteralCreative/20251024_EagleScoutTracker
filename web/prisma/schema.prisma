// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Rank {
  SCOUT
  TENDERFOOT
  SECOND_CLASS
  FIRST_CLASS
  STAR
  LIFE
  EAGLE
}

enum Role {
  ADMIN
  LEADER
  SCOUT
}

enum LinkStatus {
  PENDING
  APPROVED
  REVOKED
}

model Scout {
  id             String                     @id @default(uuid())
  firstName      String
  lastName       String
  email          String?
  phone          String?
  currentRank    Rank?
  unit           String?
  council        String?
  dateOfBirth    DateTime?
  userId         String?                    @unique
  createdAt      DateTime                   @default(now())
  updatedAt      DateTime                   @updatedAt
  progress       RankProgress[]
  meritBadges    MeritBadgeProgress[]
  boardOfReviews BoardOfReview[]
  leaderLinks    LeaderScoutLink[]
  user           User?                      @relation("UserScout", fields: [userId], references: [id])

  @@map("scouts")
}

model Requirement {
  id             String         @id @default(uuid())
  code           String         @unique
  title          String
  description    String?
  rank           Rank
  sortOrder      Int
  durationDays   Int?
  durationMonths Int?
  notes          String?
  summary        String?
  detail         String?
  resourceUrl    String?
  dependencyText String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  progress       RankProgress[]
  subtasks       RequirementSubtask[]

  @@index([rank, sortOrder])
  @@map("requirements")
}

model RankProgress {
  id                 String       @id @default(uuid())
  scoutId            String
  requirementId      String
  startedAt          DateTime?
  eligibleAt         DateTime?
  completedAt        DateTime?
  notes              String?
  approved           Boolean      @default(false)
  approvedById       String?
  approvedAt         DateTime?
  approvedInitials   String?
  approvalComment    String?
  approvalRequestedAt DateTime?
  approvalRequestedById String?
  approvalRequestedLeaderId String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  scout       Scout       @relation(fields: [scoutId], references: [id])
  requirement Requirement @relation(fields: [requirementId], references: [id])
  approvedBy  User?       @relation("LeaderApprovals", fields: [approvedById], references: [id])
  approvalRequestedBy     User? @relation("RankProgressRequestedBy", fields: [approvalRequestedById], references: [id])
  approvalRequestedLeader User? @relation("RankProgressRequestedLeader", fields: [approvalRequestedLeaderId], references: [id])
  subtasks    RequirementSubtaskProgress[]
  noteEntries RankProgressNote[]

  @@unique([scoutId, requirementId])
  @@index([requirementId])
  @@map("rank_progress")
}

model User {
  id              String             @id @default(uuid())
  email           String             @unique
  emailVerified   DateTime?
  passwordHash    String?
  firstName       String
  lastName        String
  phone           String?
  role            Role
  bsaId           String?
  initials        String?
  scoutProfile    Scout?             @relation("UserScout")
  leaderLinks     LeaderScoutLink[]  @relation("LeaderLinks")
  approvedLinks   LeaderScoutLink[]  @relation("ApprovedLinks")
  approvedProgress RankProgress[]    @relation("LeaderApprovals")
  requestedApprovals RankProgress[]  @relation("RankProgressRequestedBy")
  leaderApprovalQueue RankProgress[] @relation("RankProgressRequestedLeader")
  auditLogs       AuditLog[]
  updatedSettings Setting[]          @relation("SettingUpdatedBy")
  progressNotes   RankProgressNote[] @relation("RankProgressNoteAuthor")
  accounts        Account[]
  sessions        Session[]
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@map("users")
}

model LeaderScoutLink {
  id            String     @id @default(uuid())
  leaderId      String
  scoutId       String
  status        LinkStatus @default(PENDING)
  approvedById  String?
  approvedAt    DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  leader      User   @relation("LeaderLinks", fields: [leaderId], references: [id])
  scout       Scout  @relation(fields: [scoutId], references: [id])
  approvedBy  User?  @relation("ApprovedLinks", fields: [approvedById], references: [id])

  @@unique([leaderId, scoutId])
  @@map("leader_scout_links")
}

model MeritBadge {
  id              String                   @id @default(uuid())
  name            String                   @unique
  description     String?
  isEagleRequired Boolean                  @default(false)
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  requirements    MeritBadgeRequirement[]
  progress        MeritBadgeProgress[]

  @@map("merit_badges")
}

model MeritBadgeRequirement {
  id            String     @id @default(uuid())
  meritBadgeId  String
  code          String
  description   String?
  sortOrder     Int
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  meritBadge MeritBadge @relation(fields: [meritBadgeId], references: [id])
  statuses   MeritBadgeRequirementStatus[]

  @@unique([meritBadgeId, code])
  @@map("merit_badge_requirements")
}

model MeritBadgeProgress {
  id             String                        @id @default(uuid())
  scoutId        String
  meritBadgeId   String
  dateStarted    DateTime?
  dateCompleted  DateTime?
  counselorName  String?
  counselorPhone String?
  notes          String?
  createdAt      DateTime                      @default(now())
  updatedAt      DateTime                      @updatedAt

  scout       Scout      @relation(fields: [scoutId], references: [id])
  meritBadge  MeritBadge @relation(fields: [meritBadgeId], references: [id])
  requirements MeritBadgeRequirementStatus[]

  @@unique([scoutId, meritBadgeId])
  @@map("merit_badge_progress")
}

model MeritBadgeRequirementStatus {
  id               String                @id @default(uuid())
  progressId       String
  requirementId    String
  completedAt      DateTime?
  notes            String?
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt

  progress     MeritBadgeProgress      @relation(fields: [progressId], references: [id])
  requirement  MeritBadgeRequirement   @relation(fields: [requirementId], references: [id])

  @@unique([progressId, requirementId])
  @@map("merit_badge_requirement_status")
}

model BoardOfReview {
  id                     String   @id @default(uuid())
  scoutId                String
  rank                   Rank
  previousRankBorActual  DateTime?
  thisRankBorActual      DateTime?
  thisRankBorProjected   DateTime?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  scout Scout @relation(fields: [scoutId], references: [id])

  @@unique([scoutId, rank])
  @@map("board_of_reviews")
}

model Setting {
  id          String   @id @default(uuid())
  key         String   @unique
  value       String
  description String?
  updatedById String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  updatedBy User? @relation("SettingUpdatedBy", fields: [updatedById], references: [id])

  @@map("settings")
}

model AuditLog {
  id        String   @id @default(uuid())
  actorId   String?
  action    String
  entity    String
  entityId  String
  metadata  Json?
  createdAt DateTime @default(now())

  actor User? @relation(fields: [actorId], references: [id])

  @@index([entity, entityId])
  @@map("audit_logs")
}

model RequirementSubtask {
  id            String    @id @default(uuid())
  requirementId String
  code          String
  title         String
  detail        String?
  sortOrder     Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  requirement Requirement @relation(fields: [requirementId], references: [id])
  progress    RequirementSubtaskProgress[]

  @@unique([requirementId, code])
  @@map("requirement_subtasks")
}

model RequirementSubtaskProgress {
  id             String   @id @default(uuid())
  rankProgressId String
  subtaskId      String
  completedAt    DateTime?
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  rankProgress RankProgress   @relation(fields: [rankProgressId], references: [id])
  subtask      RequirementSubtask @relation(fields: [subtaskId], references: [id])

  @@unique([rankProgressId, subtaskId])
  @@map("requirement_subtask_progress")
}

model RankProgressNote {
  id             String   @id @default(uuid())
  rankProgressId String
  authorId       String?
  body           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  rankProgress RankProgress @relation(fields: [rankProgressId], references: [id])
  author       User?        @relation("RankProgressNoteAuthor", fields: [authorId], references: [id])

  @@index([rankProgressId])
  @@map("rank_progress_notes")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
